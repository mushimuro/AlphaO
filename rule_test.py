import renju_rule as rule

def row():
    board = [
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], # (3, 13)
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0],  # (7, 4)
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],  # (11, 5)
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],  # (14, 10)
        # 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    ]
    rule.board = board
    t1 = rule.pre_check(0, 5, 1)
    t2 = rule.pre_check(1, 2, 1)
    t3 = rule.pre_check(3, 13, 1)
    t4 = rule.pre_check(7, 4, 1)
    t5 = rule.pre_check(11, 5 , 2)
    t6 = rule.pre_check(14, 10, 1)

    print("Row Check")
    print("Test1 (overline):      ", t1 == "Not is_five")
    print("Test2 (edge):          ", t2 == "Not is_five")
    print("Test3 (edge):          ", t3 == "Not is_five")
    print("Test4:                 ", t4 == "Not is_five")
    print("Test5:                 ", t5 == "checked")
    print("Test6:                 ", t6 == "checked")


def column():
    board = [
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # (0,0)
        [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # (1,0)
        [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        # 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    ]
    rule.board = board
    t1 = rule.pre_check(1, 0, 1)
    t2 = rule.pre_check(14, 1, 1)
    t3 = rule.pre_check(2, 2, 1)
    t4 = rule.pre_check(6, 4, 1)
    t5 = rule.pre_check(7, 7, 1)
    t6 = rule.pre_check(5, 14, 1)

    print("Column Check")
    print("Test1 (overline):      ", t1 == "Not is_five")
    print("Test2 (edge):          ", t2 == "checked")
    print("Test3 (edge):          ", t3 == "Not is_five")
    print("Test4:                 ", t4 == "Not is_five")
    print("Test5:                 ", t5 == "checked")
    print("Test6:                 ", t6 == "checked")



def diagonal_falling():
    board = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 0
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], # row 1
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], # row 2
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], # row 3
        [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], # row 4
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], # row 5
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], # row 6
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], # row 7
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 8
        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 9
        [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], # row 10
        [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], # row 11
        [2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], # row 12
        [0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0], # row 13
        [0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], # row 14
       # 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    ]
    rule.board = board
    t1 = rule.pre_check(7, 8, 1)
    t2 = rule.pre_check(14, 1, 2)
    t3 = rule.pre_check(13, 5, 1)
    t4 = rule.pre_check(11, 7, 2)
    t5 = rule.pre_check(5, 9, 1)
    t6 = rule.pre_check(3, 11, 1)

    print("Diagonal falling Check")
    print("Test1 (overline):      ", t1 == "Not is_five")
    print("Test2 (edge):          ", t2 == "Not is_five")
    print("Test3 (edge):          ", t3 == "Not is_five")
    print("Test4:                 ", t4 == "checked")
    print("Test5:                 ", t5 == "Not is_five")
    print("Test6:                 ", t6 == "Not is_five")

def diagonal_rising():
    board = [
        [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 0
        [2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], # row 1
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], # row 2
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], # row 3
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0], # row 4
        [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], # row 5
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], # row 6
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], # row 7
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0], # row 8
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0], # row 9
        [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], # row 10
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], # row 11
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], # row 12
        [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], # row 13
        [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], # row 14
       # 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    ]
    rule.board = board
    t1 = rule.pre_check(11, 10, 1)
    t2 = rule.pre_check(0,1, 1)
    t3 = rule.pre_check(14, 4, 1)
    t4 = rule.pre_check(6, 7, 1)
    t5 = rule.pre_check(4, 3, 1)
    t6 = rule.pre_check(5, 4, 1)

    print("Diagonal Rising Check")
    print("Test1 (overline):      ", t1 == "Not is_five")
    print("Test2 (edge):          ", t2 == "Not is_five")
    print("Test3 (edge):          ", t3 == "checked")
    print("Test4:                 ", t4 == "Not is_five")
    print("Test5:                 ", t5 == "Not is_five")
    print("Test6:                 ", t6 == "Not is_five")

def double_three_test():
        board = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 0
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 1
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], # row 2
        [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 3
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], # row 4
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], # row 5
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 6
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 7
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], # row 8
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], # row 9
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], # row 10
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 11
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 12
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # row 13
        [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], # row 14
       # 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
    ]
    
        rule.board = board
        t1 = rule.is_double_three(board,3, 10, 1)
        t2 = rule.is_double_three(board,9, 3, 1)
        t3 = rule.is_double_three(board,4, 11, 1)
        t4 = rule.is_double_three(board,9, 10, 1)   
        print(t1)
        print(t2)
        print(t3)
        print(t4)


    
double_three_test()
